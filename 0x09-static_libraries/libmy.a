!<arch>
0-isupper.c/    0           0     0     644     251       `
#include "main.h"


/**
 * _isupper - define if a character is uppercase
 *
 * Description: Prints the alphabet with _putchar
 *
 * @c: charater
 * Return: void
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

0-strcat.c/     0           0     0     644     561       `
#include "main.h"
/**
 *_strcat - concatenates 2 strings.
 *
 * @dest: string with concatenation
 *
 * @src: string to be concatenated
 *
 * Return: Always 0.
 */

char *_strcat(char *dest, char *src)
{
		int lengthD, lengthS;

			lengthD = 0;
				lengthS = 0;

					while (*(dest + lengthD) != '\0')
								lengthD++;

						while (*(src + lengthS) != '\0' && lengthD < 97)
								{
											*(dest + lengthD) = *(src + lengthS);
													lengthD++;
															lengthS++;
																}
							*(dest + lengthD) = '\0';
								return (dest);
}

1-memcpy.c/     0           0     0     644     315       `
#include "main.h"

/**
 * _memcpy - irontnoux2
 * @dest: pointer to char params
 * @src: pointer to char params
 *
 * @n: size
 * Return: *dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
		unsigned int i;

			for (i = 0; i < n; i++)
					{
								dest[i] = src[i];
									}
				return (dest);
}

2-strlen.c/     0           0     0     644     218       `
#include "main.h"
/**
 * _strlen - returns length of string
 * Return:length of string
 *
 * @s:input
 */
int _strlen(char *s)
{
		int length = 0;
		while (*s != '\0')
		{
			length++;
			s++;
		}
		return (length);
}
3-puts.c/       0           0     0     644     231       `
#include "main.h"
/**
 *_puts - prints a string + newline
 *
 *@str:input
 *
 *Return:void
 *
 */
void _puts(char *str)
{
		int i = 0;

			while (str[i] != '\0')
					{
					_putchar(str[i]);
					i++;
					}
				_putchar('\n');
}

4-strpbrk.c/    0           0     0     644     457       `
#include "main.h"
#include <stdio.h>

/**
 *
 * _strpbrk - bytes
 *
 * @s: pointer to char
 * @accept: pointer to char
 *
 * Return: NULL
 *
 */


char *_strpbrk(char *s, char *accept)
{
		int i;

			while (*s)
					{
								for (i = 0; accept[i]; i++)

										{
															if (*s == accept[i])
																			{
																								return (s);
																											}
																	}
										s++;
											}
				return (NULL);
}

9-strcpy.c/     0           0     0     644     353       `
#include "main.h"

/**
 * print_array - print array
 * @dest: character pointer
 * @src: character source
 *
 * Description: copies string pointed to by src
 * Return: return pointer
 */

char *_strcpy(char *dest, char *src)
{
		int i;

			for (i = 0; src[i]; i++)
					{
								dest[i] = src[i];
									}
				dest[i] = src[i];
					return (dest);
}

main.c/         0           0     0     644     139       `
#include "main.h"
int main(void)
{
	_puts("\"At the end of the day my goal was to be the best hacker\"\n\t -Kelvin Witnick");
	return (0);

README.md/      0           0     0     644     27        `
0x09. C - Static libraries

100-atoi.c/     0           0     0     644     814       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
		int n;

			n = _atoi("98");
				printf("%d\n", n);
					n = _atoi("-402");
						printf("%d\n", n);
							n = _atoi("          ------++++++-----+++++--98");
								printf("%d\n", n);
									n = _atoi("214748364");
										printf("%d\n", n);
											n = _atoi("0");
												printf("%d\n", n);
													n = _atoi("Suite 402");
														printf("%d\n", n);
															n = _atoi("         +      +    -    -98 Battery Street; San Francisco, CA 94111 - USA             ");
																printf("%d\n", n);
																	n = _atoi("---++++ -++ Sui - te -   402 #cisfun :)");
																		printf("%d\n", n);
																			return (0);
}
3-strcmp.c/     0           0     0     644     400       `
#include "main.h"

/**
 *
 * _strcmp - compare 2 strings.
 *
 * @s1: string to be compared.
 * @s2: string for comparation.
 * Return: Difference.
 */

int _strcmp(char *s1, char *s2)
{
		while ((*s1 != '\0' && *s2 != '\0') && *s1 == *s2)
				{
							s1++;
									s2++;
										}
			if (*s1 == *s2)
					{
								return (0);
									}
				else
						{
								return (*s1 - *s2);
									}
}
5-strstr.c/     0           0     0     644     660       `
#include "main.h"

/**
 *
 * _strstr - function locate
 *
 * @haystack: pointer to char
 * @needle: pointer to char
 * Return: 0
 *
 */

char *_strstr(char *haystack, char *needle)
{
		char *result = haystack, *fneedle = needle;

			while (*haystack)
					{
								while (*needle)
											{
															if (*haystack++ != *needle++)
																			{
																								break;
																											}
																	}
										if (!*needle)
													{
																	return (result);
																			}
												needle = fneedle;
														result++;
																haystack = result;
																	}
				return (0);
}
0-putchar.c/    0           0     0     644     173       `
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
/**
 * main - Entry point
 *
 * Return: Always success
 */
int main(void)
{

	printf("_putchar\n");

	return (0);
}

1-isdigit.c/    0           0     0     644     233       `
#include "main.h"

/**
 * _isdigit - input
 *
 * Description: define if a character is a number
 * @c: charater
 * Return: 1 yes 0 no
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
					return (1);
			else
						return (0);
}

2-strchr.c/     0           0     0     644     363       `
#include "main.h"

/**
 * _strchr - prints found c
 * @s: pointer to char
 *
 * @c: char params to found
 *
 * Return: *S
 *
 */

char *_strchr(char *s, char c)
{
		while (*s != '\0')
				{
							if (*s == c)
										{
														return (s);
																}
									s++;
										}
			if (*s == c)
					{
								return (s);
									}
			return (0);
}

4-isalpha.c/    0           0     0     644     287       `
#include "main.h"
/**
 * _isalpha - check the code for Holberton School students.
 *
 * @c: is c an integer argument
 * Return: Always success
 */

int _isalpha(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else if (c >= 65 && c <= 90)
			{
				return (1);
			}
	return (0);
}

6-abs.c/        0           0     0     644     201       `
#include "main.h"
/**
 *  _abs - function that computes the absolute value of an integer.
 *  @ab: input letter
 *  Return: Always success
 */
int _abs(int ab)
{
return (ab * ((ab > 0)) - (ab < 0));
}

0-memset.c/     0           0     0     644     244       `
#include "main.h"

/**
 * _memset - ironnou
 * @s: pointer to char params
 * @b: data to change
 * @n: index
 * Return: *s
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
s[i] = b;
}
return (s);
}
1-strncat.c/    0           0     0     644     652       `
#include "main.h"

/**
 * _strncat - concatenate strings, defining the size of second string.
 *
 *
 * @dest: string with concatenation
 *
 * @src: string to be concatenated
 *
 * @n: size of second string
 * Return: Always 0.
 */

char *_strncat(char *dest, char *src, int n)
{
		int lengthD, lengthS;

			lengthD = 0;
				lengthS = 0;

					while (*(dest + lengthD) != '\0')
								lengthD++;

						while (*(src + lengthS) != '\0' && lengthD < 97 && lengthS < n)
								{
											*(dest + lengthD) = *(src + lengthS);
													lengthD++;
															lengthS++;
																}
							*(dest + lengthD) = '\0';
								return (dest);
}
2-strncpy.c/    0           0     0     644     439       `
#include "main.h"

/**
 *
 * _strncpy - concatenate strings, defining the size of second string.
 *
 * @dest: string with concatenation
 *
 * @src: string to be concatenated
 * @n: size of second string
 * Return: Always 0.
 *
 */

char *_strncpy(char *dest, char *src, int n)
{
		int i;

			for (i = 0; i < n && src[i] != '\0'; i++)
						*(dest + i) = *(src + i);
				for ( ; i < n; i++)
							*(dest + i) = '\0';
					return (dest);
}

3-islower.c/    0           0     0     644     222       `
#include "main.h"
/**
 * _islower - function that checks for lowercase character
 * @c: single letter input
 * Return: Always success
 */

int _islower(int c)
{

if (c >= 'a' && c <= 'z')

return (1);

else

return (0);
}
